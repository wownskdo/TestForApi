name: Copy Files to ForSite

on:
  push:
    branches: [ main ]
    paths:
      - 'Main/Presets/**'
      - 'Main/returntables/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Main/Presets/**'
      - 'Main/returntables/**'
  workflow_dispatch:

jobs:
  copy-files:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Create ForSite directory structure
      run: |
        mkdir -p ForSite/Presets
        mkdir -p ForSite/returntables

    - name: Copy Presets folder
      run: |
        if [ -d "Main/Presets" ]; then
          cp -r Main/Presets/* ForSite/Presets/
          echo "✅ Copied Presets folder"
        else
          echo "⚠️ Main/Presets folder not found"
        fi

    - name: Install Lua and JSON converter
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.3 jq

    - name: Convert and copy returntables folder
      run: |
        if [ -d "Main/returntables" ]; then
          # Create conversion script
          cat > convert_lua_to_json.lua << 'EOF'
          local function lua_to_json_value(val)
              if type(val) == "string" then
                  return '"' .. val:gsub('"', '\\"') .. '"'
              elseif type(val) == "number" then
                  return tostring(val)
              elseif type(val) == "boolean" then
                  return val and "true" or "false"
              elseif type(val) == "table" then
                  local result = {}
                  local is_array = true
                  local max_index = 0
                  
                  -- Check if it's an array
                  for k, v in pairs(val) do
                      if type(k) ~= "number" then
                          is_array = false
                          break
                      end
                      max_index = math.max(max_index, k)
                  end
                  
                  if is_array then
                      -- Array format
                      for i = 1, max_index do
                          table.insert(result, lua_to_json_value(val[i]))
                      end
                      return "[" .. table.concat(result, ",") .. "]"
                  else
                      -- Object format
                      for k, v in pairs(val) do
                          local key = type(k) == "string" and '"' .. k .. '"' or tostring(k)
                          table.insert(result, key .. ":" .. lua_to_json_value(v))
                      end
                      return "{" .. table.concat(result, ",") .. "}"
                  end
              else
                  return "null"
              end
          end
          
          local function convert_file(input_file, output_file)
              local chunk, err = loadfile(input_file)
              if not chunk then
                  print("Error loading file: " .. err)
                  return false
              end
              
              local result = chunk()
              if result then
                  local json_str = lua_to_json_value(result)
                  local file = io.open(output_file, "w")
                  if file then
                      file:write(json_str)
                      file:close()
                      return true
                  end
              end
              return false
          end
          
          -- Get command line arguments
          local input_file = arg[1]
          local output_file = arg[2]
          
          if convert_file(input_file, output_file) then
              print("✅ Converted: " .. input_file .. " → " .. output_file)
          else
              print("❌ Failed to convert: " .. input_file)
          end
          EOF
          
          # Convert each .lua file to .json
          for lua_file in Main/returntables/*.lua; do
              if [ -f "$lua_file" ]; then
                  filename=$(basename "$lua_file" .lua)
                  json_file="ForSite/returntables/${filename}.json"
                  
                  echo "Converting: $lua_file → $json_file"
                  lua5.3 convert_lua_to_json.lua "$lua_file" "$json_file"
                  
                  # Format JSON with jq if conversion was successful
                  if [ -f "$json_file" ]; then
                      jq '.' "$json_file" > "${json_file}.tmp" && mv "${json_file}.tmp" "$json_file"
                  fi
              fi
          done
          
          echo "✅ Converted and copied returntables folder to JSON format"
        else
          echo "⚠️ Main/returntables folder not found"
        fi

    - name: Copy any existing ForSite content
      run: |
        # Preserve any existing files in ForSite that aren't Presets or returntables
        if [ -d "ForSite" ]; then
          find ForSite -type f ! -path "ForSite/Presets/*" ! -path "ForSite/returntables/*" -exec echo "Preserving: {}" \;
        fi

    - name: Check for changes
      id: check-changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "📋 Changes detected:"
          git status --short
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "📋 No changes detected"
        fi

    - name: Commit and push changes
      if: steps.check-changes.outputs.changes == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git add ForSite/
        git commit -m "🔄 Auto-sync: Copy Presets and convert returntables to JSON
        
        - Copied Main/Presets/ → ForSite/Presets/
        - Converted Main/returntables/ → ForSite/returntables/ (Lua to JSON)
        - Triggered by: ${{ github.event_name }}
        - Commit: ${{ github.sha }}"
        
        git push origin HEAD:${{ github.ref_name }}

    - name: Summary
      run: |
        echo "## 📊 Copy Operation Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Source | Destination | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "Main/Presets" ]; then
          PRESET_COUNT=$(find Main/Presets -type f | wc -l)
          echo "| Main/Presets/ | ForSite/Presets/ | ✅ Copied ($PRESET_COUNT files) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Main/Presets/ | ForSite/Presets/ | ⚠️ Source not found |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "Main/returntables" ]; then
          RETURN_COUNT=$(find Main/returntables -name "*.lua" | wc -l)
          JSON_COUNT=$(find ForSite/returntables -name "*.json" | wc -l)
          echo "| Main/returntables/ | ForSite/returntables/ | ✅ Converted ($RETURN_COUNT Lua → $JSON_COUNT JSON) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Main/returntables/ | ForSite/returntables/ | ⚠️ Source not found |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
