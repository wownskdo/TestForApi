name: Copy and Modify Repository Structure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering and triggering from other workflows

permissions:
  contents: write
  actions: write  # Added permission to trigger other workflows

jobs:
  copy-and-modify:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags
        token: ${{ secrets.PAT_TOKEN }}  # Use PAT instead of GITHUB_TOKEN
        
    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Pull latest changes
      run: |
        git pull origin main --rebase
        
    - name: Create ForSite directory structure
      run: |
        # Create the ForSite directory if it doesn't exist
        mkdir -p ForSite
        
        # Copy only new files from Main/Presets to ForSite/Presets
        if [ -d "Main/Presets" ]; then
          mkdir -p ForSite/Presets
          
          # Find files in Main/Presets that don't exist in ForSite/Presets
          find Main/Presets -type f | while read source_file; do
            # Get relative path from Main/Presets
            relative_path="${source_file#Main/Presets/}"
            target_file="ForSite/Presets/$relative_path"
            
            # Only copy if target doesn't exist
            if [ ! -f "$target_file" ]; then
              # Create directory structure if needed
              mkdir -p "$(dirname "$target_file")"
              cp "$source_file" "$target_file"
              echo "‚úÖ Added new file: $target_file"
            else
              echo "‚è≠Ô∏è  Skipped existing file: $target_file"
            fi
          done
        else
          echo "‚ùå Main/Presets directory not found"
        fi
        
        # Copy only new files from Main/returntables to ForSite/returntables
        if [ -d "Main/returntables" ]; then
          mkdir -p ForSite/returntables
          
          # Find files in Main/returntables that don't exist in ForSite/returntables
          find Main/returntables -type f | while read source_file; do
            # Get relative path from Main/returntables
            relative_path="${source_file#Main/returntables/}"
            target_file="ForSite/returntables/$relative_path"
            
            # Only copy if target doesn't exist
            if [ ! -f "$target_file" ]; then
              # Create directory structure if needed
              mkdir -p "$(dirname "$target_file")"
              cp "$source_file" "$target_file"
              echo "‚úÖ Added new file: $target_file"
            else
              echo "‚è≠Ô∏è  Skipped existing file: $target_file"
            fi
          done
        else
          echo "‚ùå Main/returntables directory not found"
        fi
        
    - name: Modify only new return files content
      run: |
        # Find all newly copied .lua files in ForSite/returntables and modify their content
        if [ -d "ForSite/returntables" ]; then
          # Get list of files that were just copied (not in git yet)
          git status --porcelain ForSite/returntables/ | grep "^A\|^??" | cut -c4- | while read new_file; do
            if [[ "$new_file" == *.lua ]]; then
              echo "üîÑ Processing new file: $new_file"
              echo "--- Original content ---"
              cat "$new_file"
              echo "--- End original ---"
              
              # Use sed to replace the opening brace after 'return' with [
              sed -i 's/return\s*{/return [/' "$new_file"
              
              # Use sed to replace the closing brace at the end with ]
              sed -i 's/}$/]/' "$new_file"
              
              # Handle cases where there might be whitespace after the closing brace
              sed -i 's/}\s*$/]/' "$new_file"
              
              echo "--- Modified content ---"
              cat "$new_file"
              echo "--- End modified ---"
              echo "‚úÖ Modified new file: $new_file"
            fi
          done
          echo "üéâ All new return files have been modified"
        else
          echo "‚ùå ForSite/returntables directory not found"
        fi
        
    - name: Verify changes
      run: |
        echo "üìã ForSite directory structure:"
        ls -la ForSite/
        
        if [ -d "ForSite/Presets" ]; then
          echo "üìã ForSite/Presets contents:"
          ls -la ForSite/Presets/
        fi
        
        if [ -d "ForSite/returntables" ]; then
          echo "üìã ForSite/returntables contents:"
          ls -la ForSite/returntables/
          
          echo "üìã Git status of ForSite changes:"
          git status --porcelain ForSite/
        fi

    - name: Check for changes to stage
      id: git-check
      run: |
        git add ForSite/
        if git diff --staged --quiet; then
          echo "No new changes to stage"
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected - will trigger YML3 to handle commit and push"
        fi
        
    - name: Create summary
      if: steps.git-check.outputs.changes == 'true'
      run: |
        echo "üéØ Workflow Summary:"
        echo "==================="
        echo "‚úÖ Only new files copied to ForSite/"
        echo "‚úÖ Existing files in ForSite/ preserved unchanged"
        echo "‚úÖ New return files modified from 'return {}' to 'return []'"
        echo "‚úÖ Changes staged and ready for YML3 to push"
        echo ""
        echo "üìÅ Final ForSite structure:"
        tree ForSite/ || ls -R ForSite/

    # Trigger YML3 (returnsite workflow) to handle the push - always trigger after site copy
    - name: Trigger Return Site Workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const result = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'returnsite.yml',
            ref: 'main'
          });
          console.log('Triggered returnsite workflow:', result.status);

    # Alternative method if the above doesn't work
    - name: Trigger Return Site Workflow (Alternative)
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"ref":"main"}' \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/returnsite.yml/dispatches
