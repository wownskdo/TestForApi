name: Copy and Modify Repository Structure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering and triggering from other workflows

permissions:
  contents: write
  actions: write  # Added permission to trigger other workflows

jobs:
  copy-and-modify:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags
        token: ${{ secrets.PAT_TOKEN }}  # Use PAT instead of GITHUB_TOKEN
        
    - name: Set up Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Pull latest changes
      run: |
        git pull origin main --rebase
        
    - name: Create ForSite directory structure
      run: |
        # Create the ForSite directory if it doesn't exist
        mkdir -p ForSite
        
        # Initialize counters for tracking
        preset_copied=0
        preset_skipped=0
        return_copied=0
        return_skipped=0
        
        # Copy only new files from Main/Presets to ForSite/Presets
        if [ -d "Main/Presets" ]; then
          mkdir -p ForSite/Presets
          echo "📁 Processing Main/Presets directory..."
          
          # Find files in Main/Presets that don't exist in ForSite/Presets
          find Main/Presets -type f | while read source_file; do
            # Get relative path from Main/Presets
            relative_path="${source_file#Main/Presets/}"
            target_file="ForSite/Presets/$relative_path"
            
            # Only copy if target doesn't exist
            if [ ! -f "$target_file" ]; then
              # Create directory structure if needed
              mkdir -p "$(dirname "$target_file")"
              cp "$source_file" "$target_file"
              echo "✅ Added new preset file: $target_file"
              preset_copied=$((preset_copied + 1))
            else
              echo "⏭️  Skipped existing preset file: $target_file"
              preset_skipped=$((preset_skipped + 1))
            fi
          done
          echo "📊 Preset files: $preset_copied copied, $preset_skipped skipped"
        else
          echo "❌ Main/Presets directory not found"
        fi
        
        # Copy only new files from Main/returntables to ForSite/returntables
        if [ -d "Main/returntables" ]; then
          mkdir -p ForSite/returntables
          echo "📁 Processing Main/returntables directory..."
          
          # Find files in Main/returntables that don't exist in ForSite/returntables
          find Main/returntables -type f | while read source_file; do
            # Get relative path from Main/returntables
            relative_path="${source_file#Main/returntables/}"
            target_file="ForSite/returntables/$relative_path"
            
            # Only copy if target doesn't exist
            if [ ! -f "$target_file" ]; then
              # Create directory structure if needed
              mkdir -p "$(dirname "$target_file")"
              cp "$source_file" "$target_file"
              echo "✅ Added new return file: $target_file"
              return_copied=$((return_copied + 1))
            else
              echo "⏭️  Skipped existing return file: $target_file"
              return_skipped=$((return_skipped + 1))
            fi
          done
          echo "📊 Return files: $return_copied copied, $return_skipped skipped"
        else
          echo "❌ Main/returntables directory not found"
        fi
        
    - name: Modify only new return files content
      run: |
        # Find all newly copied .lua files in ForSite/returntables and modify their content
        if [ -d "ForSite/returntables" ]; then
          echo "🔄 Processing new return files..."
          
          # Check git status to see what files are new/modified
          git add ForSite/returntables/
          
          # Get list of files that are new or modified
          git status --porcelain ForSite/returntables/ | while read status_line; do
            # Extract the file path (remove the status prefix)
            file_path=$(echo "$status_line" | sed 's/^...//')
            
            if [[ "$file_path" == *.lua ]]; then
              echo "🔄 Processing new return file: $file_path"
              
              # Use sed to replace the opening brace after 'return' with [
              sed -i 's/return\s*{/return [/' "$file_path"
              
              # Use sed to replace the closing brace at the end with ]
              sed -i 's/}$/]/' "$file_path"
              
              # Handle cases where there might be whitespace after the closing brace
              sed -i 's/}\s*$/]/' "$file_path"
              
              echo "✅ Modified new return file: $file_path"
            fi
          done
          echo "🎉 All new return files have been modified"
        else
          echo "❌ ForSite/returntables directory not found"
        fi
        
    - name: Verify changes
      run: |
        echo "📋 ForSite directory structure:"
        if [ -d "ForSite" ]; then
          find ForSite -type f | head -20
          echo "📊 Total files in ForSite: $(find ForSite -type f | wc -l)"
        else
          echo "❌ ForSite directory not found"
        fi
        
        if [ -d "ForSite/Presets" ]; then
          echo "📋 ForSite/Presets file count: $(find ForSite/Presets -type f | wc -l)"
        fi
        
        if [ -d "ForSite/returntables" ]; then
          echo "📋 ForSite/returntables file count: $(find ForSite/returntables -type f | wc -l)"
        fi

    - name: Check for changes to stage
      id: git-check
      run: |
        # Add all ForSite changes
        git add ForSite/
        
        # Check if there are any staged changes
        if git diff --staged --quiet; then
          echo "No new changes to stage"
          echo "changes=false" >> $GITHUB_OUTPUT
        else
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected:"
          git diff --staged --name-only
          echo "Will trigger returnsite.yml to handle commit and push"
        fi
        
    - name: Create summary
      run: |
        echo "🎯 Workflow Summary:"
        echo "==================="
        if [ -d "ForSite/Presets" ]; then
          echo "📁 Preset files in ForSite: $(find ForSite/Presets -type f | wc -l)"
        fi
        if [ -d "ForSite/returntables" ]; then
          echo "📁 Return files in ForSite: $(find ForSite/returntables -type f | wc -l)"
        fi
        echo "📋 Git status:"
        git status --porcelain ForSite/ || echo "No changes detected"

    # Wait 1 minute before triggering the next workflow
    - name: Wait 1 minute
      run: |
        echo "⏰ Waiting 1 minute before triggering returnsite.yml..."
        sleep 60
        echo "✅ Wait complete, triggering returnsite workflow now"

    # Trigger YML3 (returnsite workflow) to handle the push - always trigger after site copy
    - name: Trigger Return Site Workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PAT_TOKEN }}
        script: |
          const result = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'returnsite.yml',
            ref: 'main'
          });
          console.log('Triggered returnsite workflow:', result.status);

    # Alternative method if the above doesn't work
    - name: Trigger Return Site Workflow (Alternative)
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{"ref":"main"}' \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/returnsite.yml/dispatches
